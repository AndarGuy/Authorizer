plugins {
    id 'java'
    id("com.github.johnrengelman.shadow").version("7.1.2")
}

setGroup("me.andarguy")
setVersion("0.3")

jar {
    destinationDirectory.set(file("/Users/mikhail/Desktop/Minecraft Server/Proxy Server/plugins"))
}

java {
    setSourceCompatibility(JavaVersion.VERSION_11)
    setTargetCompatibility(JavaVersion.VERSION_11)
}

compileJava {
    getOptions().setEncoding("UTF-8")
}


repositories {
    mavenCentral()

    maven {
        setName("elytrium-repo")
        setUrl("https://maven.elytrium.net/repo/")
    }
    maven {
        setName("papermc-repo")
        setUrl("https://papermc.io/repo/repository/maven-public/")
    }
    maven {
        setName("opencollab-repo")
        setUrl("https://repo.opencollab.dev/maven-snapshots/")
    }
}

dependencies {
    compileOnly 'org.projectlombok:lombok:1.18.24'
    annotationProcessor 'org.projectlombok:lombok:1.18.24'
    testCompileOnly 'org.projectlombok:lombok:1.18.24'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.24'

    compileOnly files('../CCVelocity/build/libs/CCVelocity-0.1.jar')

    compileOnly("net.elytrium:limboapi-api:1.0.5")

    compileOnly("com.velocitypowered:velocity-api:3.1.2-SNAPSHOT")
    annotationProcessor("com.velocitypowered:velocity-api:3.1.2-SNAPSHOT")

    implementation("at.favre.lib:bcrypt:0.9.0")

    implementation("com.j256.ormlite:ormlite-jdbc:6.1")
    
    implementation("mysql:mysql-connector-java:8.0.29")
    implementation('org.postgresql:postgresql:42.3.6')
}

shadowJar {
    getArchiveClassifier().set("")

    exclude("META-INF/licenses/**")
    exclude("META-INF/maven/**")
    exclude("META-INF/versions/**")
    exclude("META-INF/services/**")
    exclude("META-INF/AL2.0")
    exclude("META-INF/INFO_BIN")
    exclude("META-INF/INFO_SRC")
    exclude("META-INF/LGPL2.1")
    exclude("META-INF/LICENSE")
    exclude("META-INF/NOTICE")
    exclude("META-INF/README")
    exclude("META-INF/*.txt")
    exclude("google/protobuf/**")
    exclude("com/google/protobuf/**")
    exclude("com/j256/ormlite/**/*.txt")
    exclude("com/mysql/cj/x/**")
    exclude("com/mysql/cj/xdevapi/**")
    exclude("**/package-info.class")
    exclude("org/checkerframework/**")

    minimize()

    relocate("at.favre.lib", "me.andarguy.authorizer.thirdparty.at.favre.lib")
    relocate("com.j256.ormlite", "me.andarguy.authorizer.thirdparty.com.j256.ormlite")
    relocate("com.mysql", "me.andarguy.authorizer.thirdparty.com.mysql")
    relocate("org.postgresql", "me.andarguy.authorizer.thirdparty.org.postgresql")
}

sourceSets.main.getJava().srcDir(getTasks().register("generateTemplates", Copy) { task ->
    task.getInputs().properties("version": getVersion())

    task.from(file("src/main/templates"))
            .into(getLayout().getBuildDirectory().dir("generated/sources/templates"))
            .expand("version": getVersion())
}.map {
    it.getOutputs()
})

assemble.dependsOn(shadowJar)